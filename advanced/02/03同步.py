# 同步 协同一起进行

# 互斥锁
# 当多个线程几乎同时修改某一个共享数据的时候,需要进行同步控制
# 线程同步能够保证多个线程安全访问竞争资源,引入互斥锁
# 互斥锁为资源引入状态:锁定/非锁定

# 某个线程要修改共享数据时,先锁定,其他线程不能修改,知道线程释放资源,改成非锁定状态,保证只有一人能使用
import threading
# 创建锁
mutex = threading.Lock()

# 锁定
mutex.acquire()

# 释放
mutex.release()

# 如果这个锁之前没上锁,那么acquire不会堵塞
