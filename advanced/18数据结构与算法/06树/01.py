树是一种抽象数据类型(ADT),用来模拟具有树状结构性质的数据集合,它由n个有限节点组成一个具有层次关系的集合
特点: 
    每个节点有0-n个子节点
    就没有父节点叫根节点
    每个非根节点只有一个父节点
    每隔子节点可以分为多个不相交的字数

术语:
    节点的度: 一个节点含有的子树的个数称为该节点的度
    树的度: 一个书中,最大的节点的度称为树的度
    叶节点或终端节点: 度为0的节点
    父节点:若一个节点含有子节点,则该节点是子节点的父节点
    子节点
    兄弟节点
    节点的层次: 从根开始定义,根为第一层
    树的高度或胜读: 树中节点的最大层次 
    节点的祖先: 从根节点所经分支上的所有节点
    子孙: 以某节点为根的子树中任意节点都是该节点的子孙
    森林: 由m 棵互不相交的树的集合称为森林

树的种类:
    无序树(自由树): 树中任意节点的子节点之间没有顺序关系
    有序数: 树中任意节点的子节点之间有顺序关系
        二叉树: 每个节点最多含有2个子树的树
            完全二叉树: 每个节点的数目均达到最大值,每层都有子树
            满二叉树: 每个节点都有2个子树
            平衡二叉树(AVL): 当且仅当任何节点的两棵子树的高度差不大于1的二叉树
            排序二叉树: 有序二叉树
        霍夫曼树(用于信息编码): 带权路劲最短的二叉树(最优二叉树)
        b树: 一种对读写操作进行优化的自平衡的二叉查找树,能够保持数据有序,拥有多余两个子树

遍历
    先序遍历: 根左右
    层次遍历: 一层一层遍历
    中序遍历: 左根右
    后续遍历: 左右根